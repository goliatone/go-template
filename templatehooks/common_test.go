package templatehooks_test

import (
	"strings"
	"testing"
	"time"

	"github.com/goliatone/go-template"
	"github.com/goliatone/go-template/templatehooks"
	"github.com/stretchr/testify/require"
)

func TestCommonHooks_AddTimestampHook_Default(t *testing.T) {
	renderer, err := template.NewRenderer(template.WithBaseDir("../testdata"))
	require.NoError(t, err)

	hooks := templatehooks.NewCommonHooks()
	renderer.RegisterPostHook(hooks.AddTimestampHook())

	result, err := renderer.RenderTemplate("code.go", map[string]any{
		"package_name": "main",
		"struct_name":  "Config",
		"name":         "test",
		"version":      "1.0.0",
	})
	require.NoError(t, err)

	require.Contains(t, result, "// Generated on")
	require.Contains(t, result, time.Now().Format("2006-01-02"))
}

func TestCommonHooks_AddTimestampHook_CustomOptions(t *testing.T) {
	renderer, err := template.NewRenderer(template.WithBaseDir("../testdata"))
	require.NoError(t, err)

	hooks := templatehooks.NewCommonHooks()
	loc := time.FixedZone("TEST", 2*60*60)
	renderer.RegisterPostHook(hooks.AddTimestampHook(
		templatehooks.WithTimestampCommentPrefix("# "),
		templatehooks.WithTimestampFormat("2006-01-02 MST"),
		templatehooks.WithTimestampLocation(loc),
		templatehooks.WithTimestampCondition(func(ctx *template.HookContext) bool { return strings.HasSuffix(ctx.TemplateName, ".yaml") }),
	))

	result, err := renderer.RenderTemplate("config.yaml", map[string]any{
		"name":        "test-app",
		"version":     "1.0.0",
		"environment": "production",
	})
	require.NoError(t, err)

	require.Contains(t, result, "# Generated on ")
	require.Contains(t, result, "TEST")
}

func TestCommonHooks_AddCopyrightHook(t *testing.T) {
	renderer, err := template.NewRenderer(template.WithBaseDir("../testdata"))
	require.NoError(t, err)

	hooks := templatehooks.NewCommonHooks()
	copyright := "Copyright 2024 MyCompany Inc."
	renderer.RegisterPostHook(hooks.AddCopyrightHook(copyright))

	result, err := renderer.RenderTemplate("code.go", map[string]any{
		"package_name": "main",
		"struct_name":  "Config",
		"name":         "test",
		"version":      "1.0.0",
	})
	require.NoError(t, err)

	require.Contains(t, result, "// Copyright 2024 MyCompany Inc.")
}

func TestCommonHooks_AddLicenseHook(t *testing.T) {
	renderer, err := template.NewRenderer(template.WithBaseDir("../testdata"))
	require.NoError(t, err)

	hooks := templatehooks.NewCommonHooks()
	license := "MIT License\n\nPermission is hereby granted..."
	renderer.RegisterPostHook(hooks.AddLicenseHook(license))

	result, err := renderer.RenderTemplate("code.go", map[string]any{
		"package_name": "main",
		"struct_name":  "Config",
		"name":         "test",
		"version":      "1.0.0",
	})
	require.NoError(t, err)

	require.Contains(t, result, "/*")
	require.Contains(t, result, " * MIT License")
	require.Contains(t, result, " */")
}

func TestCommonHooks_AddLicenseHook_CustomStyle(t *testing.T) {
	renderer, err := template.NewRenderer(template.WithBaseDir("../testdata"))
	require.NoError(t, err)

	hooks := templatehooks.NewCommonHooks()
	license := "MIT License\n\nPermission is hereby granted..."
	style := templatehooks.CommentBlockStyle{LinePrefix: "# "}
	renderer.RegisterPostHook(hooks.AddLicenseHook(
		license,
		templatehooks.WithLicenseCommentStyle(style),
		templatehooks.WithLicenseCondition(func(ctx *template.HookContext) bool { return strings.HasSuffix(ctx.TemplateName, ".yaml") }),
	))

	result, err := renderer.RenderTemplate("config.yaml", map[string]any{
		"name":        "test-app",
		"version":     "1.0.0",
		"environment": "production",
	})
	require.NoError(t, err)

	require.Contains(t, result, "# MIT License")
	require.NotContains(t, result, "/*")
}

func TestCommonHooks_AddGeneratedWarningHook(t *testing.T) {
	renderer, err := template.NewRenderer(template.WithBaseDir("../testdata"))
	require.NoError(t, err)

	hooks := templatehooks.NewCommonHooks()
	renderer.RegisterPostHook(hooks.AddGeneratedWarningHook())

	result, err := renderer.RenderTemplate("code.go", map[string]any{
		"package_name": "main",
		"struct_name":  "Config",
		"name":         "test",
		"version":      "1.0.0",
	})
	require.NoError(t, err)

	require.Contains(t, result, "Code generated by go-template")
}

func TestCommonHooks_AddGeneratedWarningHook_CustomOptions(t *testing.T) {
	renderer, err := template.NewRenderer(template.WithBaseDir("../testdata"))
	require.NoError(t, err)

	hooks := templatehooks.NewCommonHooks()
	renderer.RegisterPostHook(hooks.AddGeneratedWarningHook(
		templatehooks.WithGeneratedWarningCommentPrefix("# "),
		templatehooks.WithGeneratedWarningMessage("Autogen file"),
		templatehooks.WithGeneratedWarningCondition(func(ctx *template.HookContext) bool { return strings.HasSuffix(ctx.TemplateName, ".yaml") }),
	))

	result, err := renderer.RenderTemplate("config.yaml", map[string]any{
		"name":        "test-app",
		"version":     "1.0.0",
		"environment": "production",
	})
	require.NoError(t, err)

	require.Contains(t, result, "# Autogen file")
}

func TestCommonHooks_RemoveTrailingWhitespaceHook(t *testing.T) {
	renderer, err := template.NewRenderer(template.WithBaseDir("../testdata"))
	require.NoError(t, err)

	hooks := templatehooks.NewCommonHooks()
	renderer.RegisterPostHook(hooks.RemoveTrailingWhitespaceHook())

	templateContent := "line1   \nline2\t\t\nline3"
	result, err := renderer.RenderString(templateContent, map[string]any{})
	require.NoError(t, err)

	require.Equal(t, "line1\nline2\nline3", result)
}

func TestCommonHooks_OnlyApplyToCodeFiles(t *testing.T) {
	renderer, err := template.NewRenderer(template.WithBaseDir("../testdata"))
	require.NoError(t, err)

	hooks := templatehooks.NewCommonHooks()
	renderer.RegisterPostHook(hooks.AddTimestampHook())
	renderer.RegisterPostHook(hooks.AddGeneratedWarningHook())

	result, err := renderer.RenderTemplate("config.yaml", map[string]any{
		"name":        "test-app",
		"version":     "1.0.0",
		"environment": "production",
		"features":    []string{"auth", "logging"},
	})
	require.NoError(t, err)

	require.NotContains(t, result, "// Generated on")
	require.NotContains(t, result, "// Code generated")
}

func TestCommonHooks_PreHooks_AddMetadata(t *testing.T) {
	renderer, err := template.NewRenderer(template.WithBaseDir("../testdata"))
	require.NoError(t, err)

	hooks := templatehooks.NewCommonHooks()
	renderer.RegisterPreHook(hooks.AddMetadataHook())

	renderer.RegisterPostHook(func(ctx *template.HookContext) (string, error) {
		if processedAt, exists := ctx.Metadata["processed_at"]; exists {
			if _, ok := processedAt.(time.Time); ok {
				return "// Metadata captured\n" + ctx.Output, nil
			}
		}
		return ctx.Output, nil
	})

	result, err := renderer.RenderTemplate("simple", map[string]any{
		"name":     "Alice",
		"app_name": "TestApp",
	})
	require.NoError(t, err)

	require.Contains(t, result, "// Metadata captured")
}

func TestCommonHooks_PreHooks_ValidateData(t *testing.T) {
	renderer, err := template.NewRenderer(template.WithBaseDir("../testdata"))
	require.NoError(t, err)

	hooks := templatehooks.NewCommonHooks()
	requiredFields := []string{"name", "version"}
	renderer.RegisterPreHook(hooks.ValidateDataHook(requiredFields))

	_, err = renderer.RenderTemplate("simple", map[string]any{
		"name": "Alice",
	})
	require.Error(t, err)
	require.Contains(t, err.Error(), "required field 'version' is missing")

	result, err := renderer.RenderTemplate("simple", map[string]any{
		"name":     "Alice",
		"version":  "1.0.0",
		"app_name": "TestApp",
	})
	require.NoError(t, err)
	require.Contains(t, result, "Hello, Alice!")
}

func TestCommonHooks_PreHooks_SetDefaults(t *testing.T) {
	renderer, err := template.NewRenderer(template.WithBaseDir("../testdata"))
	require.NoError(t, err)

	hooks := templatehooks.NewCommonHooks()
	defaults := map[string]any{
		"app_name": "DefaultApp",
		"version":  "0.0.1",
	}
	renderer.RegisterPreHook(hooks.SetDefaultsHook(defaults))

	result, err := renderer.RenderTemplate("simple", map[string]any{
		"name": "Bob",
	})
	require.NoError(t, err)

	require.Contains(t, result, "Hello, Bob! Welcome to DefaultApp.")

	result, err = renderer.RenderTemplate("simple", map[string]any{
		"name":     "Charlie",
		"app_name": "CustomApp",
	})
	require.NoError(t, err)

	require.Contains(t, result, "Hello, Charlie! Welcome to CustomApp.")
}

func TestCommonHooks_MultiplePostHooks_Order(t *testing.T) {
	renderer, err := template.NewRenderer(template.WithBaseDir("../testdata"))
	require.NoError(t, err)

	hooks := templatehooks.NewCommonHooks()

	renderer.RegisterPostHook(hooks.AddGeneratedWarningHook())
	renderer.RegisterPostHook(hooks.AddTimestampHook())
	renderer.RegisterPostHook(hooks.AddCopyrightHook("Copyright 2024"))

	result, err := renderer.RenderTemplate("code.go", map[string]any{
		"package_name": "main",
		"struct_name":  "Config",
		"name":         "test",
		"version":      "1.0.0",
	})
	require.NoError(t, err)

	lines := strings.Split(result, "\n")
	require.GreaterOrEqual(t, len(lines), 3)
	require.Contains(t, lines[0], "Copyright 2024")
	require.Contains(t, lines[1], "Generated on")
	require.Contains(t, lines[2], "Code generated")
}

func TestCommonHooks_RenderString_RemoveWhitespace(t *testing.T) {
	renderer, err := template.NewRenderer(template.WithBaseDir("../testdata"))
	require.NoError(t, err)

	hooks := templatehooks.NewCommonHooks()
	renderer.RegisterPostHook(hooks.RemoveTrailingWhitespaceHook())

	result, err := renderer.RenderString("Hello {{ name }}!   \nWelcome to {{ app }}.\t", map[string]any{
		"name": "Alice",
		"app":  "TestApp",
	})
	require.NoError(t, err)

	require.Equal(t, "Hello Alice!\nWelcome to TestApp.", result)
}
